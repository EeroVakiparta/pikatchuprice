name: Deploy PikatchuPrice CDK Stack

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read # for checkout

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        persist-credentials: true

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build TypeScript
      run: npm run build

    - name: Run tests
      run: npm test
      
    - name: Debug GitHub Credentials
      run: |
        echo "GitHub Event Name: ${{ github.event_name }}"
        echo "GitHub Ref: ${{ github.ref }}"
        echo "Is token available? ${{ secrets.GITHUB_TOKEN != '' }}"

    - name: Configure AWS credentials
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1
        role-duration-seconds: 1200
        mask-aws-account-id: true

    - name: Debug AWS credentials
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: |
        echo "Checking AWS configuration..."
        echo "AWS SDK Version Information:"
        aws --version
        
        echo "Explicitly setting credentials in environment:"
        # Don't actually echo real credentials, just check if they exist
        if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
          echo "AWS_ACCESS_KEY_ID is set"
        else
          echo "AWS_ACCESS_KEY_ID is NOT set"
        fi
        
        if [ -n "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
          echo "AWS_SECRET_ACCESS_KEY is set"
        else
          echo "AWS_SECRET_ACCESS_KEY is NOT set"
        fi
        
        echo "Testing AWS credentials..."
        aws sts get-caller-identity || (
          echo "AWS credential check failed. Details:"
          echo "Debug Credentials Provider Chain:"
          # Add debugging but don't expose actual credentials
          AWS_SDK_LOAD_CONFIG=1 NODE_DEBUG=credentials node -e "
            const AWS = require('aws-sdk');
            console.log('Initializing AWS SDK with default credentials provider chain');
            const sts = new AWS.STS();
            sts.getCallerIdentity().promise()
              .then(data => console.log('Success: ' + JSON.stringify(data)))
              .catch(err => console.error('Error: ' + err.message));
          "
          exit 1
        )

    - name: CDK Synth
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: |
        # Ensure credentials are available for synth
        export AWS_SDK_LOAD_CONFIG=1
        npx cdk synth

    - name: CDK Deploy
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: npx cdk deploy --require-approval never

    - name: Wait for deployment to stabilize
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: sleep 30

    - name: Check for console errors after deployment
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      run: |
        # Install Puppeteer with dependencies
        npm install --save-dev puppeteer
        
        # Ubuntu runners may need additional dependencies for Chromium
        if [ -f /etc/os-release ]; then
          sudo apt-get update
          # Updated dependencies for Ubuntu 24.04 - optimized for GitHub Actions runners
          sudo apt-get install -y libgtk-3-0 libnotify4 libnss3 libxss1 libasound2t64 libxtst6 xauth xvfb
        fi
        
        # Run the test with increased timeout
        node test/console-errors.js

    - name: Create version.json
      run: |
        VERSION=$(node -e "console.log(require('./package.json').version)")
        BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%S.%3NZ')
        echo "{\"version\": \"$VERSION\", \"buildDate\": \"$BUILD_DATE\"}" > public/version.json
        cat public/version.json

    - name: Generate CHANGELOG
      id: changelog
      run: |
        npm install -g conventional-changelog-cli
        conventional-changelog -p angular -i CHANGELOG.md -s

    - name: Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        npx semantic-release 
        
    # Add this new step to upload the updated version.json to S3 after release
    - name: Upload updated version.json to S3
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        # Get the S3 bucket name from the CDK outputs or hardcode it if needed
        BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name PikatchupriceStack --query "Stacks[0].Outputs[?OutputKey=='WebsiteBucketName'].OutputValue" --output text)
        
        if [ -z "$BUCKET_NAME" ]; then
          # Fallback to the known bucket name if we couldn't get it from CloudFormation
          BUCKET_NAME="pikatchupricestack-pikatchupricebucket69d94924-5i7w033szcqk"
        fi
        
        echo "Uploading version.json to S3 bucket: $BUCKET_NAME"
        aws s3 cp public/version.json s3://$BUCKET_NAME/version.json
        
        echo "Clearing CloudFront cache if applicable"
        # Get CloudFront distribution ID if it exists
        DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?contains(Origins.Items[].DomainName, '$BUCKET_NAME')].Id" --output text)
        
        if [ -n "$DISTRIBUTION_ID" ]; then
          echo "Invalidating CloudFront cache for distribution: $DISTRIBUTION_ID"
          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/version.json"
        fi 